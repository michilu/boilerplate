@startuml

package "exporter" {
	class "GlobalMonitoredResource" as exporter.GlobalMonitoredResource <<V,Orchid>> {
		-projectID: string
		+MonitoredResource(): (string, map[string]string)
	}
}



package "run" {
	class "topic" as run.topic <<V,Orchid>>
}



package "update" {
	class "topic" as update.topic <<V,Orchid>>
}



package "debug" {
	class "Config" as debug.Config <<V,Orchid>> {
		-ctx: context.Context
		-clientRepo: debug.ClientRepository
		+Config(ctx: context.Context): (debug.ClientWithContexter, error)
		+Connect(m: debug.ClientWithContexter): (context.Context, error)
	}
}



package "debug" {
	interface "ConfigGetContexter" as debug.ConfigGetContexter {
		+GetContext(): context.Context
	}
}



package "debug" {
	interface "Configer" as debug.Configer {
		+Config(: context.Context): (debug.ClientWithContexter, error)
		+Connect(: debug.ClientWithContexter): (context.Context, error)
	}
}



package "debug" {
	interface "ConnectGetContexter" as debug.ConnectGetContexter {
		+GetContext(): context.Context
	}
}



package "debug" {
	class "clientRepository" as debug.clientRepository <<E,#FFCC00>> {
		+Config(ctx: context.Context): (debug.ClientWithContexter, error)
		+Connect(m: debug.ClientWithContexter): error
	}
}



package "debug" {
	class "topic" as debug.topic <<V,Orchid>>
}



package "event" {
	class "Byte" as event.Byte <<E,#FFCC00>> {
		+Byte: []byte
		+XXX_NoUnkeyedLiteral: struct{}
		+XXX_unrecognized: []byte
		+XXX_sizecache: int32
		+Reset()
		+String(): string
		+ProtoMessage()
		+Descriptor(): ([]byte, []int)
		+XXX_Unmarshal(b: []byte): error
		+XXX_Marshal(b: []byte, deterministic: bool): ([]byte, error)
		+XXX_Merge(src: proto.Message)
		+XXX_Size(): int
		+XXX_DiscardUnknown()
		+GetByte(): []byte
		+Validate(): error
	}
}



package "event" {
	interface "EventLoggerGetContexter" as event.EventLoggerGetContexter {
		+GetContext(): context.Context
	}
}



package "event" {
	class "EventWithContext" as event.EventWithContext <<E,#FFCC00>> {
		+Context: context.Context
		+Event: event.Eventer
		+GetContext(): context.Context
		+GetEvent(): event.Eventer
		+Validate(): error
		+String(): string
		+MarshalZerologObject(e: zerolog.Event)
	}
}



package "event" {
	interface "EventWithContexter" as event.EventWithContexter {
		+GetContext(): context.Context
		+GetEvent(): event.Eventer
		+MarshalZerologObject(: zerolog.Event)
		+String(): string
		+Validate(): error
	}
}



package "event" {
	class "KeyValueWithContext" as event.KeyValueWithContext <<E,#FFCC00>> {
		+Context: context.Context
		+KeyValue: keyvalue.KeyValuer
		+GetContext(): context.Context
		+GetKeyValue(): keyvalue.KeyValuer
		+Validate(): error
		+String(): string
		+MarshalZerologObject(e: zerolog.Event)
	}
}



package "event" {
	interface "KeyValueWithContexter" as event.KeyValueWithContexter {
		+GetContext(): context.Context
		+GetKeyValue(): keyvalue.KeyValuer
		+MarshalZerologObject(: zerolog.Event)
		+String(): string
		+Validate(): error
	}
}



package "event" {
	class "Saver" as event.Saver <<V,Orchid>> {
		+Saver: event.Saver
		+Save(m: event.KeyValueWithContexter): (context.Context, error)
	}
}

	event.Saver --> event.Saver

	event.Saver ..> event.KeyValueWithContexter : <<use>> 

package "event" {
	interface "SaverGetContexter" as event.SaverGetContexter {
		+GetContext(): context.Context
	}
}



package "event" {
	interface "StartGetContexter" as event.StartGetContexter {
		+GetContext(): context.Context
	}
}



package "event" {
	interface "TopicEventWithContexter" as event.TopicEventWithContexter {
		+Publish(ctx: context.Context, c: <-chan event.EventWithContexter)
		+Publisher(ctx: context.Context): chan<- event.EventWithContexter
		+Subscribe(c: chan<- event.EventWithContexter)
	}
}



package "event" {
	interface "TopicKeyValueWithContexter" as event.TopicKeyValueWithContexter {
		+Publish(ctx: context.Context, c: <-chan event.KeyValueWithContexter)
		+Publisher(ctx: context.Context): chan<- event.KeyValueWithContexter
		+Subscribe(c: chan<- event.KeyValueWithContexter)
	}
}



package "event" {
	class "mapEventWithContexter" as event.mapEventWithContexter <<V,Orchid>> {
		-mu: sync.RWMutex
		-m: map[interface{}]*event.tEventWithContexter
		-get(topic: interface{}): event.TopicEventWithContexter
	}
}



package "event" {
	class "mapKeyValueWithContexter" as event.mapKeyValueWithContexter <<V,Orchid>> {
		-mu: sync.RWMutex
		-m: map[interface{}]*event.tKeyValueWithContexter
		-get(topic: interface{}): event.TopicKeyValueWithContexter
	}
}



package "event" {
	class "tEventWithContexter" as event.tEventWithContexter <<E,#FFCC00>> {
		-mu: sync.RWMutex
		-c: []chan<- event.EventWithContexter
		+Publish(ctx: context.Context, c: <-chan event.EventWithContexter)
		+Publisher(ctx: context.Context): chan<- event.EventWithContexter
		+Subscribe(c: chan<- event.EventWithContexter)
	}
}



package "event" {
	class "tKeyValueWithContexter" as event.tKeyValueWithContexter <<E,#FFCC00>> {
		-mu: sync.RWMutex
		-c: []chan<- event.KeyValueWithContexter
		+Publish(ctx: context.Context, c: <-chan event.KeyValueWithContexter)
		+Publisher(ctx: context.Context): chan<- event.KeyValueWithContexter
		+Subscribe(c: chan<- event.KeyValueWithContexter)
	}
}



package "event" {
	class "topic" as event.topic <<V,Orchid>>
}



	debug.Config -up-|> debug.Configer
	debug.ConfigGetContexter -up-|> debug.ConnectGetContexter
	debug.ConfigGetContexter -up-|> event.EventLoggerGetContexter
	debug.ConfigGetContexter -up-|> event.SaverGetContexter
	debug.ConfigGetContexter -up-|> event.StartGetContexter
	debug.ConnectGetContexter -up-|> debug.ConfigGetContexter
	debug.ConnectGetContexter -up-|> event.EventLoggerGetContexter
	debug.ConnectGetContexter -up-|> event.SaverGetContexter
	debug.ConnectGetContexter -up-|> event.StartGetContexter
	event.EventLoggerGetContexter -up-|> debug.ConfigGetContexter
	event.EventLoggerGetContexter -up-|> debug.ConnectGetContexter
	event.EventLoggerGetContexter -up-|> event.SaverGetContexter
	event.EventLoggerGetContexter -up-|> event.StartGetContexter
	event.EventWithContext -up-|> debug.ConfigGetContexter
	event.EventWithContext -up-|> debug.ConnectGetContexter
	event.EventWithContext -up-|> event.EventLoggerGetContexter
	event.EventWithContext -up-|> event.EventWithContexter
	event.EventWithContext -up-|> event.SaverGetContexter
	event.EventWithContext -up-|> event.StartGetContexter
	event.EventWithContexter -up-|> debug.ConfigGetContexter
	event.EventWithContexter -up-|> debug.ConnectGetContexter
	event.EventWithContexter -up-|> event.EventLoggerGetContexter
	event.EventWithContexter -up-|> event.SaverGetContexter
	event.EventWithContexter -up-|> event.StartGetContexter
	event.KeyValueWithContext -up-|> debug.ConfigGetContexter
	event.KeyValueWithContext -up-|> debug.ConnectGetContexter
	event.KeyValueWithContext -up-|> event.EventLoggerGetContexter
	event.KeyValueWithContext -up-|> event.KeyValueWithContexter
	event.KeyValueWithContext -up-|> event.SaverGetContexter
	event.KeyValueWithContext -up-|> event.StartGetContexter
	event.KeyValueWithContexter -up-|> debug.ConfigGetContexter
	event.KeyValueWithContexter -up-|> debug.ConnectGetContexter
	event.KeyValueWithContexter -up-|> event.EventLoggerGetContexter
	event.KeyValueWithContexter -up-|> event.SaverGetContexter
	event.KeyValueWithContexter -up-|> event.StartGetContexter
	event.SaverGetContexter -up-|> debug.ConfigGetContexter
	event.SaverGetContexter -up-|> debug.ConnectGetContexter
	event.SaverGetContexter -up-|> event.EventLoggerGetContexter
	event.SaverGetContexter -up-|> event.StartGetContexter
	event.StartGetContexter -up-|> debug.ConfigGetContexter
	event.StartGetContexter -up-|> debug.ConnectGetContexter
	event.StartGetContexter -up-|> event.EventLoggerGetContexter
	event.StartGetContexter -up-|> event.SaverGetContexter
	event.tEventWithContexter -up-|> event.TopicEventWithContexter
	event.tKeyValueWithContexter -up-|> event.TopicKeyValueWithContexter


@enduml
