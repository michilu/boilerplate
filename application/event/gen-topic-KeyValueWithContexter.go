// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package event

import (
	"context"
	"sync"

	"github.com/michilu/boilerplate/service/errs"
	"github.com/michilu/boilerplate/service/event"
	"google.golang.org/grpc/codes"
)

var (
	topicEventKeyValueWithContexter *mapEventKeyValueWithContexter
)

func init() {
	topicEventKeyValueWithContexter = newMapEventKeyValueWithContexter()
}

// GetTopicEventKeyValueWithContexter returns a TopicEventKeyValueWithContexter of the given topic.
func GetTopicEventKeyValueWithContexter(topic interface{}) TopicEventKeyValueWithContexter {
	return topicEventKeyValueWithContexter.get(topic)
}

// TopicEventKeyValueWithContexter is a topic.
type TopicEventKeyValueWithContexter interface {
	// Publish returns a '<-chan EventKeyValueWithContexter' that joins to the given topic.
	Publish(ctx context.Context, c <-chan event.KeyValueWithContexter)
	// Publisher returns a 'chan<- EventKeyValueWithContexter' that joins to the given topic.
	Publisher(ctx context.Context) chan<- event.KeyValueWithContexter
	// Subscribe returns a 'chan<- EventKeyValueWithContexter' that joins to the given topic.
	Subscribe(c chan<- event.KeyValueWithContexter)
}

type tEventKeyValueWithContexter struct {
	mu sync.RWMutex
	c  []chan<- event.KeyValueWithContexter
}

func newTEventKeyValueWithContexter() *tEventKeyValueWithContexter {
	return &tEventKeyValueWithContexter{
		c: make([]chan<- event.KeyValueWithContexter, 0),
	}
}

func (t *tEventKeyValueWithContexter) Publish(ctx context.Context, c <-chan event.KeyValueWithContexter) {
	const op = op + ".tEventKeyValueWithContexter.Publish"

	if ctx == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'ctx' is nil"})
	}
	if c == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'c' is nil"})
	}

	go func() {
	loop:
		select {
		case <-ctx.Done():
			return
		default:
		}
		for v := range c {
			for _, c := range t.c {
				go func(c chan<- event.KeyValueWithContexter, v event.KeyValueWithContexter) {
					select {
					case <-ctx.Done():
						return
					case c <- v:
					}
				}(c, v)
			}
			goto loop
		}
	}()

}

func (t *tEventKeyValueWithContexter) Publisher(ctx context.Context) chan<- event.KeyValueWithContexter {
	const op = op + ".tEventKeyValueWithContexter.Publisher"

	if ctx == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'ctx' is nil"})
	}

	c := make(chan event.KeyValueWithContexter)
	t.Publish(ctx, c)
	return c
}

func (t *tEventKeyValueWithContexter) Subscribe(c chan<- event.KeyValueWithContexter) {
	const op = op + ".tEventKeyValueWithContexter.Subscribe"

	if c == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'c' is nil"})
	}

	t.mu.Lock()
	t.c = append(t.c, c)
	t.mu.Unlock()
}

type mapEventKeyValueWithContexter struct {
	mu sync.RWMutex
	m  map[interface{}]*tEventKeyValueWithContexter
}

func newMapEventKeyValueWithContexter() *mapEventKeyValueWithContexter {
	return &mapEventKeyValueWithContexter{
		m: make(map[interface{}]*tEventKeyValueWithContexter),
	}
}

func (m *mapEventKeyValueWithContexter) get(topic interface{}) TopicEventKeyValueWithContexter {
	const op = op + ".mapEventKeyValueWithContexter.get"

	if topic == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'topic' is nil"})
	}

	m.mu.RLock()
	v, ok := m.m[topic]
	m.mu.RUnlock()
	if ok {
		return v
	}

	m.mu.Lock()
	defer m.mu.Unlock()
	v, ok = m.m[topic]
	if ok {
		return v
	}
	v = newTEventKeyValueWithContexter()
	m.m[topic] = v
	return v
}
