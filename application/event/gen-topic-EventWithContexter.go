// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package event

import (
	"context"
	"sync"

	"github.com/michilu/boilerplate/service/errs"
	"github.com/michilu/boilerplate/service/event"
	"google.golang.org/grpc/codes"
)

var (
	topicEventEventWithContexter *mapEventEventWithContexter
)

func init() {
	topicEventEventWithContexter = newMapEventEventWithContexter()
}

// GetTopicEventEventWithContexter returns a TopicEventEventWithContexter of the given topic.
func GetTopicEventEventWithContexter(topic interface{}) TopicEventEventWithContexter {
	return topicEventEventWithContexter.get(topic)
}

// TopicEventEventWithContexter is a topic.
type TopicEventEventWithContexter interface {
	// Publish returns a '<-chan EventEventWithContexter' that joins to the given topic.
	Publish(ctx context.Context, c <-chan event.EventWithContexter)
	// Publisher returns a 'chan<- EventEventWithContexter' that joins to the given topic.
	Publisher(ctx context.Context) chan<- event.EventWithContexter
	// Subscribe returns a 'chan<- EventEventWithContexter' that joins to the given topic.
	Subscribe(c chan<- event.EventWithContexter)
}

type tEventEventWithContexter struct {
	mu sync.RWMutex
	c  []chan<- event.EventWithContexter
}

func newTEventEventWithContexter() *tEventEventWithContexter {
	return &tEventEventWithContexter{
		c: make([]chan<- event.EventWithContexter, 0),
	}
}

func (t *tEventEventWithContexter) Publish(ctx context.Context, c <-chan event.EventWithContexter) {
	const op = op + ".tEventEventWithContexter.Publish"

	if ctx == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'ctx' is nil"})
	}
	if c == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'c' is nil"})
	}

	go func() {
	loop:
		select {
		case <-ctx.Done():
			return
		default:
		}
		for v := range c {
			for _, c := range t.c {
				go func(c chan<- event.EventWithContexter, v event.EventWithContexter) {
					select {
					case <-ctx.Done():
						return
					case c <- v:
					}
				}(c, v)
			}
			goto loop
		}
	}()

}

func (t *tEventEventWithContexter) Publisher(ctx context.Context) chan<- event.EventWithContexter {
	const op = op + ".tEventEventWithContexter.Publisher"

	if ctx == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'ctx' is nil"})
	}

	c := make(chan event.EventWithContexter)
	t.Publish(ctx, c)
	return c
}

func (t *tEventEventWithContexter) Subscribe(c chan<- event.EventWithContexter) {
	const op = op + ".tEventEventWithContexter.Subscribe"

	if c == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'c' is nil"})
	}

	t.mu.Lock()
	t.c = append(t.c, c)
	t.mu.Unlock()
}

type mapEventEventWithContexter struct {
	mu sync.RWMutex
	m  map[interface{}]*tEventEventWithContexter
}

func newMapEventEventWithContexter() *mapEventEventWithContexter {
	return &mapEventEventWithContexter{
		m: make(map[interface{}]*tEventEventWithContexter),
	}
}

func (m *mapEventEventWithContexter) get(topic interface{}) TopicEventEventWithContexter {
	const op = op + ".mapEventEventWithContexter.get"

	if topic == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'topic' is nil"})
	}

	m.mu.RLock()
	v, ok := m.m[topic]
	m.mu.RUnlock()
	if ok {
		return v
	}

	m.mu.Lock()
	defer m.mu.Unlock()
	v, ok = m.m[topic]
	if ok {
		return v
	}
	v = newTEventEventWithContexter()
	m.m[topic] = v
	return v
}
