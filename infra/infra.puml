@startuml

package "event" {
	class "Repository" as event.Repository <<E,#FFCC00>> {
		-bucket: string
		-db: nutsdb.DB
		+Close(): error
		+Load(ctx: context.Context, prefix: pb.KeyPrefixer): (pb.KeyValuer, error)
		+Save(ctx: context.Context, keyvalue: pb.KeyValuer): error
	}
}


	event.Repository ..> pb.KeyPrefixer : <<use>> 
	event.Repository ..> pb.KeyValuer : <<use>> 

package "keystore" {
	class "Repository" as keystore.Repository <<E,#FFCC00>> {
		-bucket: string
		-db: nutsdb.DB
		+Close(): error
		+Delete(ctx: context.Context, key: pb.Keyer): error
		+Get(ctx: context.Context, key: pb.Keyer): (pb.KeyValuer, error)
		+Put(ctx: context.Context, keyvalue: pb.KeyValuer): error
	}
}


	keystore.Repository ..> pb.Keyer : <<use>> 
	keystore.Repository ..> pb.Keyer : <<use>> 
	keystore.Repository ..> pb.KeyValuer : <<return>> 
	keystore.Repository ..> pb.KeyValuer : <<use>> 

package "pb" {
	class "Key" as pb.Key <<E,#FFCC00>> {
		+Key: []byte
		+XXX_NoUnkeyedLiteral: struct{}
		+XXX_unrecognized: []byte
		+XXX_sizecache: int32
		+MarshalZerologObject(e: zerolog.Event)
		+Reset()
		+String(): string
		+ProtoMessage()
		+Descriptor(): ([]byte, []int)
		+XXX_Unmarshal(b: []byte): error
		+XXX_Marshal(b: []byte, deterministic: bool): ([]byte, error)
		+XXX_Merge(src: protoiface.MessageV1)
		+XXX_Size(): int
		+XXX_DiscardUnknown()
		+GetKey(): []byte
		+Validate(): error
	}
}



package "pb" {
	interface "KeyPrefixer" as pb.KeyPrefixer {
		+Descriptor(): ([]byte, []int)
		+GetPrefix(): []byte
		+MarshalZerologObject(: zerolog.Event)
		+ProtoMessage()
		+Reset()
		+String(): string
		+Validate(): error
		+XXX_DiscardUnknown()
		+XXX_Marshal(: []byte, : bool): ([]byte, error)
		+XXX_Merge(: protoiface.MessageV1)
		+XXX_Size(): int
		+XXX_Unmarshal(: []byte): error
	}
}



package "pb" {
	class "KeyValue" as pb.KeyValue <<E,#FFCC00>> {
		+Key: []byte
		+Value: []byte
		+XXX_NoUnkeyedLiteral: struct{}
		+XXX_unrecognized: []byte
		+XXX_sizecache: int32
		+MarshalZerologObject(e: zerolog.Event)
		+Reset()
		+String(): string
		+ProtoMessage()
		+Descriptor(): ([]byte, []int)
		+XXX_Unmarshal(b: []byte): error
		+XXX_Marshal(b: []byte, deterministic: bool): ([]byte, error)
		+XXX_Merge(src: protoiface.MessageV1)
		+XXX_Size(): int
		+XXX_DiscardUnknown()
		+GetKey(): []byte
		+GetValue(): []byte
		+Validate(): error
	}
}



package "keyvalue" {
	interface "KeyValueCloser" as keyvalue.KeyValueCloser {
		+Close(): error
		+Delete(: context.Context, : pb.Keyer): error
		+Get(: context.Context, : pb.Keyer): (pb.KeyValuer, error)
		+Put(: context.Context, : pb.KeyValuer): error
	}
}


	keyvalue.KeyValueCloser ..> pb.Keyer : <<use>> 
	keyvalue.KeyValueCloser ..> pb.Keyer : <<use>> 
	keyvalue.KeyValueCloser ..> pb.KeyValuer : <<return>> 
	keyvalue.KeyValueCloser ..> pb.KeyValuer : <<use>> 

package "keyvalue" {
	class "KeyValueWithContext" as keyvalue.KeyValueWithContext <<E,#FFCC00>> {
		+Context: context.Context
		+KeyValue: pb.KeyValuer
		+GetContext(): context.Context
		+GetKeyValue(): pb.KeyValuer
		+MarshalZerologObject(e: zerolog.Event)
		+String(): string
		+Validate(): error
	}
}

	keyvalue.KeyValueWithContext --> pb.KeyValuer

	keyvalue.KeyValueWithContext ..> pb.KeyValuer : <<return>> 

package "keyvalue" {
	interface "KeyValueWithContexter" as keyvalue.KeyValueWithContexter {
		+GetContext(): context.Context
		+GetKeyValue(): pb.KeyValuer
		+MarshalZerologObject(: zerolog.Event)
		+String(): string
		+Validate(): error
	}
}


	keyvalue.KeyValueWithContexter ..> pb.KeyValuer : <<return>> 

package "pb" {
	interface "KeyValuer" as pb.KeyValuer {
		+Descriptor(): ([]byte, []int)
		+GetKey(): []byte
		+GetValue(): []byte
		+MarshalZerologObject(: zerolog.Event)
		+ProtoMessage()
		+Reset()
		+String(): string
		+Validate(): error
		+XXX_DiscardUnknown()
		+XXX_Marshal(: []byte, : bool): ([]byte, error)
		+XXX_Merge(: protoiface.MessageV1)
		+XXX_Size(): int
		+XXX_Unmarshal(: []byte): error
	}
}



package "keyvalue" {
	class "KeyWithContext" as keyvalue.KeyWithContext <<E,#FFCC00>> {
		+Context: context.Context
		+Key: pb.Keyer
		+GetContext(): context.Context
		+GetKey(): pb.Keyer
		+MarshalZerologObject(e: zerolog.Event)
		+String(): string
		+Validate(): error
	}
}

	keyvalue.KeyWithContext --> pb.Keyer

	keyvalue.KeyWithContext ..> pb.Keyer : <<return>> 

package "keyvalue" {
	interface "KeyWithContexter" as keyvalue.KeyWithContexter {
		+GetContext(): context.Context
		+GetKey(): pb.Keyer
		+MarshalZerologObject(: zerolog.Event)
		+String(): string
		+Validate(): error
	}
}


	keyvalue.KeyWithContexter ..> pb.Keyer : <<return>> 

package "pb" {
	interface "Keyer" as pb.Keyer {
		+Descriptor(): ([]byte, []int)
		+GetKey(): []byte
		+MarshalZerologObject(: zerolog.Event)
		+ProtoMessage()
		+Reset()
		+String(): string
		+Validate(): error
		+XXX_DiscardUnknown()
		+XXX_Marshal(: []byte, : bool): ([]byte, error)
		+XXX_Merge(: protoiface.MessageV1)
		+XXX_Size(): int
		+XXX_Unmarshal(: []byte): error
	}
}



package "keyvalue" {
	interface "LoadSaveCloser" as keyvalue.LoadSaveCloser {
		+Close(): error
		+Load(: context.Context, : pb.KeyPrefixer): (pb.KeyValuer, error)
		+Save(: context.Context, : pb.KeyValuer): error
	}
}


	keyvalue.LoadSaveCloser ..> pb.KeyPrefixer : <<use>> 
	keyvalue.LoadSaveCloser ..> pb.KeyValuer : <<use>> 

package "keyvalue" {
	interface "TopicKeyValueWithContexter" as keyvalue.TopicKeyValueWithContexter {
		+Publish(ctx: context.Context, c: <-chan keyvalue.KeyValueWithContexter)
		+Publisher(ctx: context.Context): chan<- keyvalue.KeyValueWithContexter
		+Subscribe(c: chan<- keyvalue.KeyValueWithContexter)
	}
}



package "keyvalue" {
	interface "TopicKeyWithContexter" as keyvalue.TopicKeyWithContexter {
		+Publish(ctx: context.Context, c: <-chan keyvalue.KeyWithContexter)
		+Publisher(ctx: context.Context): chan<- keyvalue.KeyWithContexter
		+Subscribe(c: chan<- keyvalue.KeyWithContexter)
	}
}



package "keyvalue" {
	class "mapKeyValueWithContexter" as keyvalue.mapKeyValueWithContexter <<V,Orchid>> {
		-m: sync.Map
		-get(topic: interface{}): keyvalue.TopicKeyValueWithContexter
	}
}



package "keyvalue" {
	class "mapKeyWithContexter" as keyvalue.mapKeyWithContexter <<V,Orchid>> {
		-m: sync.Map
		-get(topic: interface{}): keyvalue.TopicKeyWithContexter
	}
}



package "keyvalue" {
	class "tKeyValueWithContexter" as keyvalue.tKeyValueWithContexter <<E,#FFCC00>> {
		-mu: sync.RWMutex
		-c: []chan<- keyvalue.KeyValueWithContexter
		+Publish(ctx: context.Context, c: <-chan keyvalue.KeyValueWithContexter)
		+Publisher(ctx: context.Context): chan<- keyvalue.KeyValueWithContexter
		+Subscribe(c: chan<- keyvalue.KeyValueWithContexter)
	}
}



package "keyvalue" {
	class "tKeyWithContexter" as keyvalue.tKeyWithContexter <<E,#FFCC00>> {
		-mu: sync.RWMutex
		-c: []chan<- keyvalue.KeyWithContexter
		+Publish(ctx: context.Context, c: <-chan keyvalue.KeyWithContexter)
		+Publisher(ctx: context.Context): chan<- keyvalue.KeyWithContexter
		+Subscribe(c: chan<- keyvalue.KeyWithContexter)
	}
}



	event.Repository -up-|> keyvalue.LoadSaveCloser
	keystore.Repository -up-|> keyvalue.KeyValueCloser
	pb.Key -up-|> pb.Keyer
	pb.KeyValue -up-|> pb.KeyValuer
	pb.KeyValue -up-|> pb.Keyer
	keyvalue.KeyValueWithContext -up-|> keyvalue.KeyValueWithContexter
	pb.KeyValuer -up-|> pb.Keyer
	keyvalue.KeyWithContext -up-|> keyvalue.KeyWithContexter
	keyvalue.tKeyValueWithContexter -up-|> keyvalue.TopicKeyValueWithContexter
	keyvalue.tKeyWithContexter -up-|> keyvalue.TopicKeyWithContexter


@enduml
