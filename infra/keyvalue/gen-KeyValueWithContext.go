// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package keyvalue

import (
	"context"
	"fmt"

	"github.com/michilu/boilerplate/service/errs"
	"github.com/michilu/boilerplate/service/slog"
	"github.com/rs/zerolog"
	"google.golang.org/grpc/codes"
)

// KeyValueWithContext is KeyValue with context.Context.
type KeyValueWithContext struct {
	Context  context.Context
	KeyValue KeyValuer
}

// GetContext returns context.Context.
func (p *KeyValueWithContext) GetContext() context.Context {
	return p.Context
}

// GetKeyValue returns KeyValuer.
func (p *KeyValueWithContext) GetKeyValue() KeyValuer {
	return p.KeyValue
}

// MarshalZerologObject writes KeyValueWithContext to given zerolog.Event.
func (p *KeyValueWithContext) MarshalZerologObject(e *zerolog.Event) {
	const op = op + ".KeyValueWithContext.MarshalZerologObject"
	if p.KeyValue == nil {
		return
	}
	v, ok := p.KeyValue.(zerolog.LogObjectMarshaler)
	if !ok {
		err := &errs.Error{Op: op, Code: codes.InvalidArgument,
			Message: "'*KeyValueWithContext.KeyValue' must be zerolog.LogObjectMarshaler'"}
		slog.Logger().Error().Str("op", op).Err(err).Msg(err.Error())
		return
	}
	e.Object("KeyValueWithContext", v)
}

// String returns KeyValueWithContext as string.
func (p *KeyValueWithContext) String() string {
	const v0 = "KeyValueWithContext<Context: %v, KeyValue: %v>"
	if p.KeyValue == nil {
		return fmt.Sprintf(v0, p.Context, p.KeyValue)
	}
	v1, ok := p.KeyValue.(fmt.Stringer)
	if !ok {
		return fmt.Sprintf(v0, p.Context, p.KeyValue)
	}
	return fmt.Sprintf(v0, p.Context, v1.String())
}

// Validate returns error if failed validate.
func (p *KeyValueWithContext) Validate() error {
	const op = op + ".KeyValueWithContext.Validate"
	if p.Context == nil {
		err := &errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. '*KeyValueWithContext.Context' is nil"}
		return err
	}
	if p.KeyValue == nil {
		err := &errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. '*KeyValueWithContext.KeyValue' is nil"}
		return err
	}
	v0, ok := p.KeyValue.(interface{ Validate() error })
	if !ok {
		err := &errs.Error{Op: op, Code: codes.InvalidArgument, Message: "'*KeyValueWithContext.KeyValue' must be have 'Validate() error'"}
		return err
	}
	{
		err := v0.Validate()
		if err != nil {
			err := &errs.Error{Op: op, Code: codes.InvalidArgument, Err: err}
			return err
		}
	}
	return nil
}
