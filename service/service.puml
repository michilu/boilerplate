@startuml

package "config" {
	class "KV" as config.KV <<V,Orchid>> {
		+K: string
		+V: interface{}
	}
}



package "debug" {
	class "Client" as debug.Client <<E,#FFCC00>> {
		+Id: string
		+XXX_NoUnkeyedLiteral: struct{}
		+XXX_unrecognized: []byte
		+XXX_sizecache: int32
		+Reset()
		+String(): string
		+ProtoMessage()
		+Descriptor(): ([]byte, []int)
		+XXX_Unmarshal(b: []byte): error
		+XXX_Marshal(b: []byte, deterministic: bool): ([]byte, error)
		+XXX_Merge(src: proto.Message)
		+XXX_Size(): int
		+XXX_DiscardUnknown()
		+GetId(): string
		+Validate(): error
	}
}



package "debug" {
	interface "ClientRepository" as debug.ClientRepository {
		+Config(: context.Context): (debug.ClientWithContexter, error)
		+Connect(: debug.ClientWithContexter): error
	}
}


	debug.ClientRepository ..> debug.ClientWithContexter : <<return>> 
	debug.ClientRepository ..> debug.ClientWithContexter : <<use>> 

package "debug" {
	class "ClientWithContext" as debug.ClientWithContext <<E,#FFCC00>> {
		+Context: context.Context
		+Client: debug.Client
		+GetContext(): context.Context
		+Validate(): error
	}
}

	debug.ClientWithContext --> debug.Client


package "debug" {
	interface "ClientWithContexter" as debug.ClientWithContexter {
		+Descriptor(): ([]byte, []int)
		+GetContext(): context.Context
		+GetId(): string
		+ProtoMessage()
		+Reset()
		+String(): string
		+Validate(): error
		+XXX_DiscardUnknown()
		+XXX_Marshal(: []byte, : bool): ([]byte, error)
		+XXX_Merge(: proto.Message)
		+XXX_Size(): int
		+XXX_Unmarshal(: []byte): error
	}
}



package "debug" {
	interface "Clienter" as debug.Clienter {
		+Descriptor(): ([]byte, []int)
		+GetId(): string
		+ProtoMessage()
		+Reset()
		+String(): string
		+Validate(): error
		+XXX_DiscardUnknown()
		+XXX_Marshal(: []byte, : bool): ([]byte, error)
		+XXX_Merge(: proto.Message)
		+XXX_Size(): int
		+XXX_Unmarshal(: []byte): error
	}
}



package "debug" {
	interface "TopicClientWithContexter" as debug.TopicClientWithContexter {
		+Publish(ctx: context.Context, c: <-chan debug.ClientWithContexter)
		+Publisher(ctx: context.Context): chan<- debug.ClientWithContexter
		+Subscribe(c: chan<- debug.ClientWithContexter)
	}
}



package "debug" {
	interface "TopicClienter" as debug.TopicClienter {
		+Publish(ctx: context.Context, c: <-chan debug.Clienter)
		+Publisher(ctx: context.Context): chan<- debug.Clienter
		+Subscribe(c: chan<- debug.Clienter)
	}
}



package "debug" {
	class "mapClientWithContexter" as debug.mapClientWithContexter <<V,Orchid>> {
		-mu: sync.RWMutex
		-m: map[interface{}]*debug.tClientWithContexter
		-get(topic: interface{}): debug.TopicClientWithContexter
	}
}



package "debug" {
	class "mapClienter" as debug.mapClienter <<V,Orchid>> {
		-mu: sync.RWMutex
		-m: map[interface{}]*debug.tClienter
		-get(topic: interface{}): debug.TopicClienter
	}
}



package "debug" {
	class "tClientWithContexter" as debug.tClientWithContexter <<E,#FFCC00>> {
		-mu: sync.RWMutex
		-c: []chan<- debug.ClientWithContexter
		+Publish(ctx: context.Context, c: <-chan debug.ClientWithContexter)
		+Publisher(ctx: context.Context): chan<- debug.ClientWithContexter
		+Subscribe(c: chan<- debug.ClientWithContexter)
	}
}



package "debug" {
	class "tClienter" as debug.tClienter <<E,#FFCC00>> {
		-mu: sync.RWMutex
		-c: []chan<- debug.Clienter
		+Publish(ctx: context.Context, c: <-chan debug.Clienter)
		+Publisher(ctx: context.Context): chan<- debug.Clienter
		+Subscribe(c: chan<- debug.Clienter)
	}
}



package "errs" {
	class "Error" as errs.Error <<E,#FFCC00>> {
		+Code: fmt.Stringer
		+Message: string
		+Op: string
		+Err: error
		+Error(): string
		+MarshalZerologObject(e: zerolog.Event)
	}
}



package "meta" {
	class "Meta" as meta.Meta <<E,#FFCC00>> {
		+Name: string
		+Semver: string
		+Channel: string
		+Runtime: *meta.Runtime
		+Serial: string
		+Build: time.Time
		+Vcs: *meta.Vcs
		+XXX_NoUnkeyedLiteral: struct{}
		+XXX_unrecognized: []byte
		+XXX_sizecache: int32
		+MarshalZerologObject(e: zerolog.Event)
		+Reset()
		+String(): string
		+ProtoMessage()
		+Descriptor(): ([]byte, []int)
		+XXX_Unmarshal(b: []byte): error
		+XXX_Marshal(b: []byte, deterministic: bool): ([]byte, error)
		+XXX_Merge(src: proto.Message)
		+XXX_Size(): int
		+XXX_DiscardUnknown()
		+GetName(): string
		+GetSemver(): string
		+GetChannel(): string
		+GetRuntime(): *meta.Runtime
		+GetSerial(): string
		+GetBuild(): time.Time
		+GetVcs(): *meta.Vcs
		+Validate(): error
		+JSON(): []byte
	}
}

	meta.Meta --> meta.Runtime
	meta.Meta --> meta.Vcs

	meta.Meta ..> meta.Runtime : <<return>> 
	meta.Meta ..> meta.Vcs : <<return>> 

package "meta" {
	interface "Metaer" as meta.Metaer {
		+Descriptor(): ([]byte, []int)
		+GetBuild(): time.Time
		+GetChannel(): string
		+GetName(): string
		+GetRuntime(): *meta.Runtime
		+GetSemver(): string
		+GetSerial(): string
		+GetVcs(): *meta.Vcs
		+JSON(): []byte
		+MarshalZerologObject(: zerolog.Event)
		+ProtoMessage()
		+Reset()
		+String(): string
		+Validate(): error
		+XXX_DiscardUnknown()
		+XXX_Marshal(: []byte, : bool): ([]byte, error)
		+XXX_Merge(: proto.Message)
		+XXX_Size(): int
		+XXX_Unmarshal(: []byte): error
	}
}


	meta.Metaer ..> meta.Runtime : <<return>> 
	meta.Metaer ..> meta.Vcs : <<return>> 

package "meta" {
	class "Runtime" as meta.Runtime <<E,#FFCC00>> {
		+Version: string
		+Arch: string
		+Os: string
		+XXX_NoUnkeyedLiteral: struct{}
		+XXX_unrecognized: []byte
		+XXX_sizecache: int32
		+Reset()
		+String(): string
		+ProtoMessage()
		+Descriptor(): ([]byte, []int)
		+XXX_Unmarshal(b: []byte): error
		+XXX_Marshal(b: []byte, deterministic: bool): ([]byte, error)
		+XXX_Merge(src: proto.Message)
		+XXX_Size(): int
		+XXX_DiscardUnknown()
		+GetVersion(): string
		+GetArch(): string
		+GetOs(): string
		+Validate(): error
	}
}



package "meta" {
	class "Vcs" as meta.Vcs <<E,#FFCC00>> {
		+Hash: string
		+Branch: string
		+Tag: string
		+XXX_NoUnkeyedLiteral: struct{}
		+XXX_unrecognized: []byte
		+XXX_sizecache: int32
		+Reset()
		+String(): string
		+ProtoMessage()
		+Descriptor(): ([]byte, []int)
		+XXX_Unmarshal(b: []byte): error
		+XXX_Marshal(b: []byte, deterministic: bool): ([]byte, error)
		+XXX_Merge(src: proto.Message)
		+XXX_Size(): int
		+XXX_DiscardUnknown()
		+GetHash(): string
		+GetBranch(): string
		+GetTag(): string
		+Validate(): error
	}
}



package "now" {
	interface "TopicContextContext" as now.TopicContextContext {
		+Publish(ctx: context.Context, c: <-chan context.Context)
		+Publisher(ctx: context.Context): chan<- context.Context
		+Subscribe(c: chan<- context.Context)
	}
}



package "now" {
	class "mapContextContext" as now.mapContextContext <<V,Orchid>> {
		-mu: sync.RWMutex
		-m: map[interface{}]*now.tContextContext
		-get(topic: interface{}): now.TopicContextContext
	}
}



package "now" {
	class "tContextContext" as now.tContextContext <<E,#FFCC00>> {
		-mu: sync.RWMutex
		-c: []chan<- context.Context
		+Publish(ctx: context.Context, c: <-chan context.Context)
		+Publisher(ctx: context.Context): chan<- context.Context
		+Subscribe(c: chan<- context.Context)
	}
}



package "pipe" {
	interface "InT" as pipe.InT
}



package "pipe" {
	interface "NameGetContexter" as pipe.NameGetContexter {
		+GetContext(): context.Context
	}
}



package "pipe" {
	interface "OutT" as pipe.OutT
}



package "semaphore" {
	interface "Semaphore" as semaphore.Semaphore {
		+Acquire(ctx: context.Context, n: int): error
		+GetCount(): int
		+GetLimit(): int
		+Release(n: int): int
		+SetLimit(limit: int)
		+TryAcquire(n: int): bool
	}
}



package "terminate" {
	interface "TerminateGetContexter" as terminate.TerminateGetContexter {
		+GetContext(): context.Context
	}
}



package "terminate" {
	interface "TopicContextContext" as terminate.TopicContextContext {
		+Publish(ctx: context.Context, c: <-chan context.Context)
		+Publisher(ctx: context.Context): chan<- context.Context
		+Subscribe(c: chan<- context.Context)
	}
}



package "terminate" {
	class "mapContextContext" as terminate.mapContextContext <<V,Orchid>> {
		-mu: sync.RWMutex
		-m: map[interface{}]*terminate.tContextContext
		-get(topic: interface{}): terminate.TopicContextContext
	}
}



package "terminate" {
	class "tContextContext" as terminate.tContextContext <<E,#FFCC00>> {
		-mu: sync.RWMutex
		-c: []chan<- context.Context
		+Publish(ctx: context.Context, c: <-chan context.Context)
		+Publisher(ctx: context.Context): chan<- context.Context
		+Subscribe(c: chan<- context.Context)
	}
}



package "topic" {
	interface "ChanT" as topic.ChanT
}



package "topic" {
	interface "TopicChanT" as topic.TopicChanT {
		+Publish(ctx: context.Context, c: <-chan topic.ChanT)
		+Publisher(ctx: context.Context): chan<- topic.ChanT
		+Subscribe(c: chan<- topic.ChanT)
	}
}



package "topic" {
	class "mapChanT" as topic.mapChanT <<V,Orchid>> {
		-mu: sync.RWMutex
		-m: map[interface{}]*topic.tChanT
		-get(topic: interface{}): topic.TopicChanT
	}
}



package "topic" {
	class "tChanT" as topic.tChanT <<E,#FFCC00>> {
		-mu: sync.RWMutex
		-c: []chan<- topic.ChanT
		+Publish(ctx: context.Context, c: <-chan topic.ChanT)
		+Publisher(ctx: context.Context): chan<- topic.ChanT
		+Subscribe(c: chan<- topic.ChanT)
	}
}



package "update" {
	interface "UpdateGetContexter" as update.UpdateGetContexter {
		+GetContext(): context.Context
	}
}



package "slog" {
	class "HookMeta" as slog.HookMeta <<V,Orchid>> {
		+Run(e: zerolog.Event, level: zerolog.Level, msg: string)
	}
}



package "slog" {
	class "StackdriverLoggingWriter" as slog.StackdriverLoggingWriter <<E,#FFCC00>> {
		+Logger: logging.Logger
		-parentProjects: string
		-projectID: string
		-traceIDTemplate: string
		+Write(p: []byte): (int, error)
		+WriteLevel(level: zerolog.Level, p: []byte): (int, error)
		+Flush(): error
		+GetTraceIDTemplate(): string
		+GetParentProjects(): string
	}
}



package "slog" {
	interface "Tracer" as slog.Tracer {
		+GetTraceIDTemplate(): string
	}
}



package "slog" {
	class "rawJSON" as slog.rawJSON <<E,#FFCC00>> {
		+MarshalJSON(): ([]byte, error)
		+UnmarshalJSON(b: []byte): error
	}
}



	config.KV -up-|> pipe.InT
	config.KV -up-|> pipe.OutT
	config.KV -up-|> topic.ChanT
	debug.Client -up-|> debug.Clienter
	debug.Client -up-|> pipe.InT
	debug.Client -up-|> pipe.OutT
	debug.Client -up-|> topic.ChanT
	debug.ClientRepository -up-|> pipe.InT
	debug.ClientRepository -up-|> pipe.OutT
	debug.ClientRepository -up-|> topic.ChanT
	debug.ClientWithContext -up-|> debug.ClientWithContexter
	debug.ClientWithContext -up-|> debug.Clienter
	debug.ClientWithContext -up-|> pipe.InT
	debug.ClientWithContext -up-|> pipe.NameGetContexter
	debug.ClientWithContext -up-|> pipe.OutT
	debug.ClientWithContext -up-|> terminate.TerminateGetContexter
	debug.ClientWithContext -up-|> topic.ChanT
	debug.ClientWithContext -up-|> update.UpdateGetContexter
	debug.ClientWithContexter -up-|> debug.Clienter
	debug.ClientWithContexter -up-|> pipe.InT
	debug.ClientWithContexter -up-|> pipe.NameGetContexter
	debug.ClientWithContexter -up-|> pipe.OutT
	debug.ClientWithContexter -up-|> terminate.TerminateGetContexter
	debug.ClientWithContexter -up-|> topic.ChanT
	debug.ClientWithContexter -up-|> update.UpdateGetContexter
	debug.Clienter -up-|> pipe.InT
	debug.Clienter -up-|> pipe.OutT
	debug.Clienter -up-|> topic.ChanT
	debug.TopicClientWithContexter -up-|> pipe.InT
	debug.TopicClientWithContexter -up-|> pipe.OutT
	debug.TopicClientWithContexter -up-|> topic.ChanT
	debug.TopicClienter -up-|> pipe.InT
	debug.TopicClienter -up-|> pipe.OutT
	debug.TopicClienter -up-|> topic.ChanT
	debug.mapClientWithContexter -up-|> pipe.InT
	debug.mapClientWithContexter -up-|> pipe.OutT
	debug.mapClientWithContexter -up-|> topic.ChanT
	debug.mapClienter -up-|> pipe.InT
	debug.mapClienter -up-|> pipe.OutT
	debug.mapClienter -up-|> topic.ChanT
	debug.tClientWithContexter -up-|> debug.TopicClientWithContexter
	debug.tClientWithContexter -up-|> pipe.InT
	debug.tClientWithContexter -up-|> pipe.OutT
	debug.tClientWithContexter -up-|> topic.ChanT
	debug.tClienter -up-|> debug.TopicClienter
	debug.tClienter -up-|> pipe.InT
	debug.tClienter -up-|> pipe.OutT
	debug.tClienter -up-|> topic.ChanT
	errs.Error -up-|> pipe.InT
	errs.Error -up-|> pipe.OutT
	errs.Error -up-|> topic.ChanT
	meta.Meta -up-|> meta.Metaer
	meta.Meta -up-|> pipe.InT
	meta.Meta -up-|> pipe.OutT
	meta.Meta -up-|> topic.ChanT
	meta.Metaer -up-|> pipe.InT
	meta.Metaer -up-|> pipe.OutT
	meta.Metaer -up-|> topic.ChanT
	meta.Runtime -up-|> pipe.InT
	meta.Runtime -up-|> pipe.OutT
	meta.Runtime -up-|> topic.ChanT
	meta.Vcs -up-|> pipe.InT
	meta.Vcs -up-|> pipe.OutT
	meta.Vcs -up-|> topic.ChanT
	now.TopicContextContext -up-|> pipe.InT
	now.TopicContextContext -up-|> pipe.OutT
	now.TopicContextContext -up-|> terminate.TopicContextContext
	now.TopicContextContext -up-|> topic.ChanT
	now.mapContextContext -up-|> pipe.InT
	now.mapContextContext -up-|> pipe.OutT
	now.mapContextContext -up-|> topic.ChanT
	now.tContextContext -up-|> now.TopicContextContext
	now.tContextContext -up-|> pipe.InT
	now.tContextContext -up-|> pipe.OutT
	now.tContextContext -up-|> terminate.TopicContextContext
	now.tContextContext -up-|> topic.ChanT
	pipe.InT -up-|> pipe.OutT
	pipe.InT -up-|> topic.ChanT
	pipe.NameGetContexter -up-|> pipe.InT
	pipe.NameGetContexter -up-|> pipe.OutT
	pipe.NameGetContexter -up-|> terminate.TerminateGetContexter
	pipe.NameGetContexter -up-|> topic.ChanT
	pipe.NameGetContexter -up-|> update.UpdateGetContexter
	pipe.OutT -up-|> pipe.InT
	pipe.OutT -up-|> topic.ChanT
	semaphore.Semaphore -up-|> pipe.InT
	semaphore.Semaphore -up-|> pipe.OutT
	semaphore.Semaphore -up-|> topic.ChanT
	terminate.TerminateGetContexter -up-|> pipe.InT
	terminate.TerminateGetContexter -up-|> pipe.NameGetContexter
	terminate.TerminateGetContexter -up-|> pipe.OutT
	terminate.TerminateGetContexter -up-|> topic.ChanT
	terminate.TerminateGetContexter -up-|> update.UpdateGetContexter
	terminate.TopicContextContext -up-|> now.TopicContextContext
	terminate.TopicContextContext -up-|> pipe.InT
	terminate.TopicContextContext -up-|> pipe.OutT
	terminate.TopicContextContext -up-|> topic.ChanT
	terminate.mapContextContext -up-|> pipe.InT
	terminate.mapContextContext -up-|> pipe.OutT
	terminate.mapContextContext -up-|> topic.ChanT
	terminate.tContextContext -up-|> now.TopicContextContext
	terminate.tContextContext -up-|> pipe.InT
	terminate.tContextContext -up-|> pipe.OutT
	terminate.tContextContext -up-|> terminate.TopicContextContext
	terminate.tContextContext -up-|> topic.ChanT
	topic.ChanT -up-|> pipe.InT
	topic.ChanT -up-|> pipe.OutT
	topic.TopicChanT -up-|> pipe.InT
	topic.TopicChanT -up-|> pipe.OutT
	topic.TopicChanT -up-|> topic.ChanT
	topic.mapChanT -up-|> pipe.InT
	topic.mapChanT -up-|> pipe.OutT
	topic.mapChanT -up-|> topic.ChanT
	topic.tChanT -up-|> pipe.InT
	topic.tChanT -up-|> pipe.OutT
	topic.tChanT -up-|> topic.ChanT
	topic.tChanT -up-|> topic.TopicChanT
	update.UpdateGetContexter -up-|> pipe.InT
	update.UpdateGetContexter -up-|> pipe.NameGetContexter
	update.UpdateGetContexter -up-|> pipe.OutT
	update.UpdateGetContexter -up-|> terminate.TerminateGetContexter
	update.UpdateGetContexter -up-|> topic.ChanT
	slog.HookMeta -up-|> pipe.InT
	slog.HookMeta -up-|> pipe.OutT
	slog.HookMeta -up-|> topic.ChanT
	slog.StackdriverLoggingWriter -up-|> pipe.InT
	slog.StackdriverLoggingWriter -up-|> pipe.OutT
	slog.StackdriverLoggingWriter -up-|> topic.ChanT
	slog.StackdriverLoggingWriter -up-|> slog.Tracer
	slog.Tracer -up-|> pipe.InT
	slog.Tracer -up-|> pipe.OutT
	slog.Tracer -up-|> topic.ChanT
	slog.rawJSON -up-|> pipe.InT
	slog.rawJSON -up-|> pipe.OutT
	slog.rawJSON -up-|> topic.ChanT


@enduml
