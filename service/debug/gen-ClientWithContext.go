// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package debug

import (
	"context"
	fmt "fmt"

	"github.com/michilu/boilerplate/service/errs"
	"github.com/michilu/boilerplate/service/slog"
	"github.com/rs/zerolog"
	"google.golang.org/grpc/codes"
)

// ClientWithContext is Client with context.Context.
type ClientWithContext struct {
	Context context.Context
	Client  Clienter
}

// GetContext returns context.Context.
func (p *ClientWithContext) GetContext() context.Context {
	return p.Context
}

// GetClient returns Clienter.
func (p *ClientWithContext) GetClient() Clienter {
	return p.Client
}

// MarshalZerologObject writes ClientWithContext to given zerolog.Event.
func (p *ClientWithContext) MarshalZerologObject(e *zerolog.Event) {
	const op = op + ".ClientWithContext.MarshalZerologObject"
	if p.Client == nil {
		return
	}
	v, ok := p.Client.(zerolog.LogObjectMarshaler)
	if !ok {
		err := &errs.Error{Op: op, Code: codes.InvalidArgument,
			Message: "'*ClientWithContext.Client' must be zerolog.LogObjectMarshaler'"}
		slog.Logger().Error().Str("op", op).Err(err).Msg(err.Error())
		return
	}
	e.Object("ClientWithContext", v)
}

// String returns ClientWithContext as string.
func (p *ClientWithContext) String() string {
	const v0 = "ClientWithContext<Context: %v, Client: %v>"
	if p.Client == nil {
		return fmt.Sprintf(v0, p.Context, p.Client)
	}
	v1, ok := p.Client.(fmt.Stringer)
	if !ok {
		return fmt.Sprintf(v0, p.Context, p.Client)
	}
	return fmt.Sprintf(v0, p.Context, v1.String())
}

// Validate returns error if failed validate.
func (p *ClientWithContext) Validate() error {
	const op = op + ".ClientWithContext.Validate"
	if p.Context == nil {
		err := &errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. '*ClientWithContext.Context' is nil"}
		return err
	}
	if p.Client == nil {
		err := &errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. '*ClientWithContext.Client' is nil"}
		return err
	}
	v0, ok := p.Client.(interface{ Validate() error })
	if !ok {
		err := &errs.Error{Op: op, Code: codes.InvalidArgument, Message: "'*ClientWithContext.Client' must be have 'Validate() error'"}
		return err
	}
	{
		err := v0.Validate()
		if err != nil {
			err := &errs.Error{Op: op, Code: codes.InvalidArgument, Err: err}
			return err
		}
	}
	return nil
}
