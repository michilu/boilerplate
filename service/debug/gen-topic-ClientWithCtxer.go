// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package debug

import (
	"context"
	"sync"

	"github.com/michilu/boilerplate/service/errs"
	"google.golang.org/grpc/codes"
)

var (
	topicClientWithCtxer *mapClientWithCtxer
)

func init() {
	topicClientWithCtxer = newMapClientWithCtxer()
}

// GetTopicClientWithCtxer returns a TopicClientWithCtxer of the given topic.
func GetTopicClientWithCtxer(topic interface{}) TopicClientWithCtxer {
	return topicClientWithCtxer.get(topic)
}

// TopicClientWithCtxer is a topic.
type TopicClientWithCtxer interface {
	// Publish returns a '<-chan ClientWithCtxer' that joins to the given topic.
	Publish(ctx context.Context, c <-chan ClientWithCtxer)
	// Publisher returns a 'chan<- ClientWithCtxer' that joins to the given topic.
	Publisher(ctx context.Context) chan<- ClientWithCtxer
	// Subscribe returns a 'chan<- ClientWithCtxer' that joins to the given topic.
	Subscribe(c chan<- ClientWithCtxer)
}

type tClientWithCtxer struct {
	mu sync.RWMutex
	c  []chan<- ClientWithCtxer
}

func newTClientWithCtxer() *tClientWithCtxer {
	return &tClientWithCtxer{
		c: make([]chan<- ClientWithCtxer, 0),
	}
}

func (t *tClientWithCtxer) Publish(ctx context.Context, c <-chan ClientWithCtxer) {
	const op = op + ".tClientWithCtxer.Publish"

	if ctx == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'ctx' is nil"})
	}
	if c == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'c' is nil"})
	}

	go func() {
	loop:
		select {
		case <-ctx.Done():
			return
		default:
		}
		for v := range c {
			for _, c := range t.c {
				go func(c chan<- ClientWithCtxer, v ClientWithCtxer) {
					select {
					case <-ctx.Done():
						return
					case c <- v:
					}
				}(c, v)
			}
			goto loop
		}
	}()

}

func (t *tClientWithCtxer) Publisher(ctx context.Context) chan<- ClientWithCtxer {
	const op = op + ".tClientWithCtxer.Publisher"

	if ctx == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'ctx' is nil"})
	}

	c := make(chan ClientWithCtxer)
	t.Publish(ctx, c)
	return c
}

func (t *tClientWithCtxer) Subscribe(c chan<- ClientWithCtxer) {
	const op = op + ".tClientWithCtxer.Subscribe"

	if c == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'c' is nil"})
	}

	t.mu.Lock()
	t.c = append(t.c, c)
	t.mu.Unlock()
}

type mapClientWithCtxer struct {
	mu sync.RWMutex
	m  map[interface{}]*tClientWithCtxer
}

func newMapClientWithCtxer() *mapClientWithCtxer {
	return &mapClientWithCtxer{
		m: make(map[interface{}]*tClientWithCtxer),
	}
}

func (m *mapClientWithCtxer) get(topic interface{}) TopicClientWithCtxer {
	const op = op + ".mapClientWithCtxer.get"

	if topic == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'topic' is nil"})
	}

	m.mu.RLock()
	v, ok := m.m[topic]
	m.mu.RUnlock()
	if ok {
		return v
	}

	m.mu.Lock()
	defer m.mu.Unlock()
	v, ok = m.m[topic]
	if ok {
		return v
	}
	v = newTClientWithCtxer()
	m.m[topic] = v
	return v
}
