// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package debug

import (
	"context"
	"sync"

	"github.com/michilu/boilerplate/service/errs"
	"github.com/michilu/boilerplate/service/slog"
	"google.golang.org/grpc/codes"
)

var (
	topicClientWithContexter *mapClientWithContexter
)

func init() {
	topicClientWithContexter = newMapClientWithContexter()
}

// GetTopicClientWithContexter returns a TopicClientWithContexter of the given topic.
func GetTopicClientWithContexter(topic interface{}) TopicClientWithContexter {
	return topicClientWithContexter.get(topic)
}

// TopicClientWithContexter is a topic.
type TopicClientWithContexter interface {
	// Publish returns a '<-chan ClientWithContexter' that joins to the given topic.
	Publish(ctx context.Context, c <-chan ClientWithContexter)
	// Publisher returns a 'chan<- ClientWithContexter' that joins to the given topic.
	Publisher(ctx context.Context) chan<- ClientWithContexter
	// Subscribe returns a 'chan<- ClientWithContexter' that joins to the given topic.
	Subscribe(c chan<- ClientWithContexter)
}

type tClientWithContexter struct {
	mu sync.RWMutex
	c  []chan<- ClientWithContexter
}

func newTClientWithContexter() *tClientWithContexter {
	return &tClientWithContexter{
		c: make([]chan<- ClientWithContexter, 0),
	}
}

func (t *tClientWithContexter) Publish(ctx context.Context, c <-chan ClientWithContexter) {
	const op = op + ".tClientWithContexter.Publish"

	if ctx == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'ctx' is nil"})
	}
	if c == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'c' is nil"})
	}

	go slog.Recover(ctx, func(ctx context.Context) error {
		const op = op + "#go"
	loop:
		select {
		case <-ctx.Done():
			if err := ctx.Err(); err != nil {
				return &errs.Error{Op: op, Err: err}
			}
			return nil
		default:
		}
		for v := range c {
			for _, c := range t.c {
				go slog.Recover(ctx, func(ctx context.Context) error {
					func(c chan<- ClientWithContexter, v ClientWithContexter) {
						const op = op + "#func"
						select {
						case <-ctx.Done():
							err := &errs.Error{Op: op, Code: codes.Canceled, Err: ctx.Err()}
							slog.Logger().Debug().Err(err).Str("op", op).Msg(err.Error())
							return
						case c <- v:
						}
					}(c, v)
					return nil
				})
			}
			goto loop
		}
		return nil
	})

}

func (t *tClientWithContexter) Publisher(ctx context.Context) chan<- ClientWithContexter {
	const op = op + ".tClientWithContexter.Publisher"

	if ctx == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'ctx' is nil"})
	}

	c := make(chan ClientWithContexter)
	t.Publish(ctx, c)
	return c
}

func (t *tClientWithContexter) Subscribe(c chan<- ClientWithContexter) {
	const op = op + ".tClientWithContexter.Subscribe"

	if c == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'c' is nil"})
	}

	t.mu.Lock()
	t.c = append(t.c, c)
	t.mu.Unlock()
}

type mapClientWithContexter struct {
	mu sync.RWMutex
	m  map[interface{}]*tClientWithContexter
}

func newMapClientWithContexter() *mapClientWithContexter {
	return &mapClientWithContexter{
		m: make(map[interface{}]*tClientWithContexter),
	}
}

func (m *mapClientWithContexter) get(topic interface{}) TopicClientWithContexter {
	const op = op + ".mapClientWithContexter.get"

	if topic == nil {
		panic(&errs.Error{Op: op, Code: codes.InvalidArgument, Message: "must be given. 'topic' is nil"})
	}

	m.mu.RLock()
	v, ok := m.m[topic]
	m.mu.RUnlock()
	if ok {
		return v
	}

	m.mu.Lock()
	defer m.mu.Unlock()
	v, ok = m.m[topic]
	if ok {
		return v
	}
	v = newTClientWithContexter()
	m.m[topic] = v
	return v
}
